import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../datos/modelos/api_exception.dart';
import '../../datos/servicios/credit_api_service.dart';
import '../../datos/modelos/credit_full_details.dart';
import '../../datos/modelos/credito.dart';
import 'auth_provider.dart';
import 'websocket_provider.dart';
import 'pago_provider.dart';
import '../utils/schedule_utils.dart';

// Estado del provider de cr√©ditos
class CreditState {
  final List<Credito> credits;
  final List<Credito> attentionCredits;
  final List<Credito> pendingApprovalCredits;
  final List<Credito> waitingDeliveryCredits;
  final List<Credito> readyForDeliveryCredits;
  final List<Credito> overdueDeliveryCredits;
  final CreditStats? stats;
  final WaitingListSummary? waitingListSummary;
  final bool isLoading;
  final bool isLoadingMore;
  final String? errorMessage;
  final String? successMessage;
  final int currentPage;
  final int totalPages;
  final int totalItems;
  final Map<String, dynamic> validationErrors;

  CreditState({
    this.credits = const [],
    this.attentionCredits = const [],
    this.pendingApprovalCredits = const [],
    this.waitingDeliveryCredits = const [],
    this.readyForDeliveryCredits = const [],
    this.overdueDeliveryCredits = const [],
    this.stats,
    this.waitingListSummary,
    this.isLoading = false,
    this.isLoadingMore = false,
    this.errorMessage,
    this.successMessage,
    this.currentPage = 1,
    this.totalPages = 1,
    this.totalItems = 0,
    this.validationErrors = const {},
  });

  CreditState copyWith({
    List<Credito>? credits,
    List<Credito>? attentionCredits,
    List<Credito>? pendingApprovalCredits,
    List<Credito>? waitingDeliveryCredits,
    List<Credito>? readyForDeliveryCredits,
    List<Credito>? overdueDeliveryCredits,
    CreditStats? stats,
    WaitingListSummary? waitingListSummary,
    bool? isLoading,
    bool? isLoadingMore,
    String? errorMessage,
    String? successMessage,
    int? currentPage,
    int? totalPages,
    int? totalItems,
    Map<String, dynamic>? validationErrors,
  }) {
    return CreditState(
      credits: credits ?? this.credits,
      attentionCredits: attentionCredits ?? this.attentionCredits,
      pendingApprovalCredits:
          pendingApprovalCredits ?? this.pendingApprovalCredits,
      waitingDeliveryCredits:
          waitingDeliveryCredits ?? this.waitingDeliveryCredits,
      readyForDeliveryCredits:
          readyForDeliveryCredits ?? this.readyForDeliveryCredits,
      overdueDeliveryCredits:
          overdueDeliveryCredits ?? this.overdueDeliveryCredits,
      stats: stats ?? this.stats,
      waitingListSummary: waitingListSummary ?? this.waitingListSummary,
      isLoading: isLoading ?? this.isLoading,
      isLoadingMore: isLoadingMore ?? this.isLoadingMore,
      errorMessage: errorMessage,
      successMessage: successMessage,
      currentPage: currentPage ?? this.currentPage,
      totalPages: totalPages ?? this.totalPages,
      totalItems: totalItems ?? this.totalItems,
      validationErrors: validationErrors ?? this.validationErrors,
    );
  }
}

// Notifier para gestionar cr√©ditos
class CreditNotifier extends StateNotifier<CreditState> {
  final CreditApiService _creditApiService;
  final Ref _ref;

  CreditNotifier(this._creditApiService, this._ref) : super(CreditState());

  Map<String, dynamic>? _lastQuery;

  // ========================================
  // M√âTODOS PRINCIPALES
  // ========================================

  /// Obtiene todos los cr√©ditos
  Future<void> loadCredits({
    int? clientId,
    int? cobradorId,
    String? status,
    String? search,
    List<String>? frequencies,
    DateTime? startDateFrom,
    DateTime? startDateTo,
    DateTime? endDateFrom,
    DateTime? endDateTo,
    double? amountMin,
    double? amountMax,
    double? totalAmountMin,
    double? totalAmountMax,
    double? balanceMin,
    double? balanceMax,
    bool? isOverdue, // Filtro para cuotas atrasadas
    double? overdueAmountMin, // Monto m√≠nimo atrasado
    double? overdueAmountMax, // Monto m√°ximo atrasado
    int page = 1,
    int? perPage,
  }) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos...');

      // Guardar √∫ltimos par√°metros de consulta
      _lastQuery = {
        'clientId': clientId,
        'cobradorId': cobradorId,
        'status': status,
        'search': search,
        'frequencies': frequencies,
        'startDateFrom': startDateFrom,
        'startDateTo': startDateTo,
        'endDateFrom': endDateFrom,
        'endDateTo': endDateTo,
        'amountMin': amountMin,
        'amountMax': amountMax,
        'totalAmountMin': totalAmountMin,
        'totalAmountMax': totalAmountMax,
        'balanceMin': balanceMin,
        'balanceMax': balanceMax,
        'isOverdue': isOverdue,
        'overdueAmountMin': overdueAmountMin,
        'overdueAmountMax': overdueAmountMax,
        'perPage': perPage ?? 15,
      };

      final response = await _creditApiService.getCredits(
        clientId: clientId,
        cobradorId: cobradorId,
        status: status,
        search: search,
        frequency: (frequencies == null || frequencies.isEmpty)
            ? null
            : frequencies.join(','),
        startDateFrom: startDateFrom?.toIso8601String().split('T')[0],
        startDateTo: startDateTo?.toIso8601String().split('T')[0],
        endDateFrom: endDateFrom?.toIso8601String().split('T')[0],
        endDateTo: endDateTo?.toIso8601String().split('T')[0],
        amountMin: amountMin,
        amountMax: amountMax,
        totalAmountMin: totalAmountMin,
        totalAmountMax: totalAmountMax,
        balanceMin: balanceMin,
        balanceMax: balanceMax,
        isOverdue: isOverdue,
        overdueAmountMin: overdueAmountMin,
        overdueAmountMax: overdueAmountMax,
        page: page,
        perPage: perPage ?? 15,
      );

      if (response['success'] == true) {
        final data = response['data'];
        final creditsData = data['data'] as List? ?? [];

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          credits: credits,
          isLoading: false,
          isLoadingMore: false,
          currentPage: data['current_page'] ?? 1,
          totalPages: data['last_page'] ?? 1,
          totalItems: data['total'] ?? 0,
        );

        print('‚úÖ ${credits.length} cr√©ditos cargados exitosamente');
      } else {
        throw Exception(response['message'] ?? 'Error al cargar cr√©ditos');
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos: $e');
      state = state.copyWith(
        isLoading: false,
        isLoadingMore: false,
        errorMessage: 'Error al cargar cr√©ditos: $e',
      );
    }
  }

  bool get hasMore => state.currentPage < state.totalPages;

  Future<void> loadMoreCredits() async {
    if (state.isLoading || state.isLoadingMore) return;
    if (!hasMore) return;

    final query = _lastQuery ?? {};
    final int nextPage = (state.currentPage) + 1;
    final int perPage = (query['perPage'] as int?) ?? 15;

    try {
      state = state.copyWith(isLoadingMore: true, errorMessage: null);

      final response = await _creditApiService.getCredits(
        clientId: query['clientId'] as int?,
        cobradorId: query['cobradorId'] as int?,
        status: query['status'] as String?,
        search: query['search'] as String?,
        frequency:
            (query['frequencies'] == null ||
                (query['frequencies'] as List).isEmpty)
            ? null
            : (query['frequencies'] as List).join(','),
        startDateFrom: (query['startDateFrom'] as DateTime?)
            ?.toIso8601String()
            .split('T')[0],
        startDateTo: (query['startDateTo'] as DateTime?)
            ?.toIso8601String()
            .split('T')[0],
        endDateFrom: (query['endDateFrom'] as DateTime?)
            ?.toIso8601String()
            .split('T')[0],
        endDateTo: (query['endDateTo'] as DateTime?)?.toIso8601String().split(
          'T',
        )[0],
        amountMin: query['amountMin'] as double?,
        amountMax: query['amountMax'] as double?,
        totalAmountMin: query['totalAmountMin'] as double?,
        totalAmountMax: query['totalAmountMax'] as double?,
        balanceMin: query['balanceMin'] as double?,
        balanceMax: query['balanceMax'] as double?,
        page: nextPage,
        perPage: perPage,
      );

      if (response['success'] == true) {
        final data = response['data'];
        final creditsData = data['data'] as List? ?? [];
        final newCredits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        // Evitar duplicados por id
        final existing = {for (var c in state.credits) c.id: c};
        for (final c in newCredits) {
          existing[c.id] = c;
        }
        final merged = existing.values.toList();

        state = state.copyWith(
          credits: merged,
          isLoadingMore: false,
          currentPage: data['current_page'] ?? nextPage,
          totalPages: data['last_page'] ?? state.totalPages,
          totalItems: data['total'] ?? state.totalItems,
        );
      } else {
        throw Exception(response['message'] ?? 'Error al cargar m√°s cr√©ditos');
      }
    } catch (e) {
      print('‚ùå Error al cargar m√°s cr√©ditos: $e');
      state = state.copyWith(
        isLoadingMore: false,
        errorMessage: 'Error al cargar m√°s cr√©ditos: $e',
      );
    }
  }

  /// Crea un nuevo cr√©dito
  Future<bool> createCredit({
    required int clientId,
    required double amount,
    required double balance,
    required String frequency,
    required DateTime startDate,
    required DateTime endDate,
    double? interestRate,
    double? totalAmount,
    double? installmentAmount,
    int? totalInstallments,
    double? latitude,
    double? longitude,
    DateTime? scheduledDeliveryDate,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('üîÑ Iniciando proceso de creaci√≥n de cr√©dito...');

      // Ajustar regla de negocio: cr√©ditos diarios usan la duraci√≥n manual (Lun‚ÄìS√°b)
      DateTime normalizedEndDate = endDate;
      if (frequency == 'daily') {
        final count = totalInstallments ?? 24;
        normalizedEndDate = ScheduleUtils.computeDailyEndDate(startDate, count);
      }

      final creditData = <String, dynamic>{
        'client_id': clientId,
        'amount': amount,
        'balance': balance,
        'frequency': frequency,
        'start_date': startDate.toIso8601String().split('T')[0],
        'end_date': normalizedEndDate.toIso8601String().split('T')[0],
        'status': 'pending_approval', // Estado inicial para lista de espera
      };

      // Agregar campos opcionales
      if (scheduledDeliveryDate != null) {
        creditData['scheduled_delivery_date'] = scheduledDeliveryDate
            .toIso8601String();
      }
      if (interestRate != null && interestRate > 0) {
        creditData['interest_rate'] = interestRate;
      }
      if (totalAmount != null) {
        creditData['total_amount'] = totalAmount;
      }
      if (installmentAmount != null) {
        creditData['installment_amount'] = installmentAmount;
      }
      if (totalInstallments != null) {
        creditData['total_installments'] = totalInstallments;
      }
      if (latitude != null) {
        creditData['latitude'] = latitude;
      }
      if (longitude != null) {
        creditData['longitude'] = longitude;
      }

      print('üöÄ Enviando datos al servidor: $creditData');

      final response = await _creditApiService.createCredit(creditData);

      if (response['success'] == true) {
        final nuevoCredito = Credito.fromJson(response['data']);

        // Agregar el nuevo cr√©dito a la lista
        final creditosActualizados = [nuevoCredito, ...state.credits];

        state = state.copyWith(
          credits: creditosActualizados,
          isLoading: false,
          successMessage: 'Cr√©dito creado exitosamente',
        );

        // Notificar v√≠a WebSocket
        _notifyCreditCreated(nuevoCredito);

        print('‚úÖ Cr√©dito creado exitosamente');
        return true;
      } else {
        throw Exception(response['message'] ?? 'Error al crear cr√©dito');
      }
    } on ApiException catch (e) {
      print('‚ùå ApiException al crear cr√©dito: ${e.message}');

      String errorMessage = e.message;
      Map<String, dynamic> validationErrors = {};
      if (e.hasValidationErrors) {
        validationErrors = e.validationErrors;
        if (validationErrors.isNotEmpty) {
          final firstKey = validationErrors.keys.first;
          final firstList = validationErrors[firstKey];
          if (firstList is List && firstList.isNotEmpty) {
            errorMessage = firstList.first.toString();
          }
        }
      }

      state = state.copyWith(
        isLoading: false,
        errorMessage: errorMessage,
        validationErrors: validationErrors,
      );
      return false;
    } catch (e) {
      print('‚ùå Error al crear cr√©dito: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al crear cr√©dito: $e',
      );
      return false;
    }
  }

  /// Actualiza un cr√©dito existente
  Future<bool> updateCredit({
    required int creditId,
    int? clientId,
    double? amount,
    double? balance,
    double? interestRate,
    String? frequency,
    String? status,
    DateTime? startDate,
    DateTime? endDate,
    double? totalAmount,
    double? installmentAmount,
    int? totalInstallments,
    double? latitude,
    double? longitude,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('üîÑ Actualizando cr√©dito: $creditId');

      final creditData = <String, dynamic>{};

      if (clientId != null) creditData['client_id'] = clientId;
      if (amount != null) creditData['amount'] = amount;
      if (balance != null) creditData['balance'] = balance;
      if (interestRate != null) creditData['interest_rate'] = interestRate;
      if (frequency != null) creditData['frequency'] = frequency;
      if (status != null) creditData['status'] = status;
      if (startDate != null) {
        creditData['start_date'] = startDate.toIso8601String().split('T')[0];
      }
      if (endDate != null) {
        var normalizedEnd = endDate;
        // Si es diario, ajustar fecha fin
        final existing = state.credits.firstWhere(
          (c) => c.id == creditId,
          orElse: () => throw Exception('Cr√©dito no encontrado'),
        );
        final freq = frequency ?? existing.frequency;
        final start = startDate ?? existing.startDate;
        if (freq == 'daily') {
          final count =
              totalInstallments ??
              _inferInstallmentsFromAmounts(totalAmount, installmentAmount) ??
              24;
          normalizedEnd = ScheduleUtils.computeDailyEndDate(start, count);
        }
        creditData['end_date'] = normalizedEnd.toIso8601String().split('T')[0];
      }
      if (totalAmount != null) creditData['total_amount'] = totalAmount;
      if (installmentAmount != null)
        creditData['installment_amount'] = installmentAmount;
      if (totalInstallments != null)
        creditData['total_installments'] = totalInstallments;
      if (latitude != null) creditData['latitude'] = latitude;
      if (longitude != null) creditData['longitude'] = longitude;

      final response = await _creditApiService.updateCredit(
        creditId,
        creditData,
      );

      if (response['success'] == true) {
        final creditoActualizado = Credito.fromJson(response['data']);

        // Actualizar el cr√©dito en la lista
        final creditosActualizados = state.credits.map((credito) {
          return credito.id == creditId ? creditoActualizado : credito;
        }).toList();

        state = state.copyWith(
          credits: creditosActualizados,
          isLoading: false,
          successMessage: 'Cr√©dito actualizado exitosamente',
        );

        print('‚úÖ Cr√©dito actualizado exitosamente');
        return true;
      } else {
        throw Exception(response['message'] ?? 'Error al actualizar cr√©dito');
      }
    } catch (e) {
      print('‚ùå Error al actualizar cr√©dito: $e');

      String errorMessage = 'Error al actualizar cr√©dito';
      if (e.toString().contains('422')) {
        errorMessage = 'Datos de entrada inv√°lidos';
      } else if (e.toString().contains('403')) {
        errorMessage = 'No tienes permisos para actualizar este cr√©dito';
      } else if (e.toString().contains('404')) {
        errorMessage = 'Cr√©dito no encontrado';
      }

      state = state.copyWith(isLoading: false, errorMessage: errorMessage);
      return false;
    }
  }

  /// Anula un cr√©dito cambiando su estado a 'cancelled'
  Future<bool> cancelCredit(int creditId) async {
    try {
      print('üö´ Anulando cr√©dito: $creditId');

      // Obtener el cr√©dito actual para preservar todos sus datos
      final currentCredit = state.credits.firstWhere(
        (c) => c.id == creditId,
        orElse: () =>
            throw Exception('Cr√©dito no encontrado en el estado local'),
      );

      // Usar el m√©todo updateCredit existente para cambiar solo el estado
      final success = await updateCredit(
        creditId: creditId,
        clientId: currentCredit.clientId,
        amount: currentCredit.amount,
        balance: currentCredit.balance,
        interestRate: currentCredit.interestRate,
        frequency: currentCredit.frequency,
        status: 'cancelled', // Estado de anulado
        startDate: currentCredit.startDate,
        endDate: currentCredit.endDate,
        totalAmount: currentCredit.totalAmount,
        installmentAmount: currentCredit.installmentAmount,
        totalInstallments: currentCredit.totalInstallments,
      );

      if (success) {
        print('‚úÖ Cr√©dito anulado exitosamente');
        state = state.copyWith(successMessage: 'Cr√©dito anulado exitosamente');
      }

      return success;
    } catch (e) {
      print('‚ùå Error al anular cr√©dito: $e');

      String errorMessage = 'Error al anular cr√©dito';
      if (e.toString().contains('403')) {
        errorMessage = 'No tienes permisos para anular este cr√©dito';
      } else if (e.toString().contains('404')) {
        errorMessage = 'Cr√©dito no encontrado';
      }

      state = state.copyWith(isLoading: false, errorMessage: errorMessage);
      return false;
    }
  }

  /// Elimina un cr√©dito
  Future<bool> deleteCredit(int creditId) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('üóëÔ∏è Eliminando cr√©dito: $creditId');

      final response = await _creditApiService.deleteCredit(creditId);

      if (response['success'] == true) {
        // Remover el cr√©dito de la lista
        final creditosActualizados = state.credits
            .where((credito) => credito.id != creditId)
            .toList();

        state = state.copyWith(
          credits: creditosActualizados,
          isLoading: false,
          successMessage: 'Cr√©dito eliminado exitosamente',
        );

        print('‚úÖ Cr√©dito eliminado exitosamente');
        return true;
      } else {
        throw Exception(response['message'] ?? 'Error al eliminar cr√©dito');
      }
    } catch (e) {
      print('‚ùå Error al eliminar cr√©dito: $e');

      String errorMessage = 'Error al eliminar cr√©dito';
      if (e.toString().contains('403')) {
        errorMessage = 'No tienes permisos para eliminar este cr√©dito';
      } else if (e.toString().contains('404')) {
        errorMessage = 'Cr√©dito no encontrado';
      }

      state = state.copyWith(isLoading: false, errorMessage: errorMessage);
      return false;
    }
  }

  /// Procesa un pago para un cr√©dito (delegado al PagoProvider) - CON UBICACI√ìN GPS
  Future<Map<String, dynamic>?> processPayment({
    required int creditId,
    required double amount,
    String paymentType = 'cash',
    String? notes,
    double? latitude,
    double? longitude,
  }) async {
    // Validar estado del cr√©dito localmente
    final current = state.credits.firstWhere(
      (c) => c.id == creditId,
      orElse: () => Credito(
        id: creditId,
        clientId: 0,
        amount: 0,
        balance: 0,
        frequency: 'monthly',
        status: 'active',
        startDate: DateTime.now(),
        endDate: DateTime.now(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    );
    if (current.status != 'active') {
      state = state.copyWith(
        errorMessage: 'Solo se pueden registrar pagos para cr√©ditos activos',
        successMessage: null,
      );
      return null;
    }

    // Delegar al PagoProvider incluyendo la ubicaci√≥n GPS
    final pagoNotifier = _ref.read(pagoProvider.notifier);
    final result = await pagoNotifier.processPaymentForCredit(
      creditId: creditId,
      amount: amount,
      paymentType: paymentType,
      notes: notes,
      latitude: latitude,
      longitude: longitude,
    );

    // Si hay informaci√≥n del cr√©dito retornada, actualizar la lista local
    if (result != null && result['credit'] != null) {
      final creditoActualizado = Credito.fromJson(result['credit']);
      final creditosActualizados = state.credits.map((credito) {
        return credito.id == creditId ? creditoActualizado : credito;
      }).toList();
      state = state.copyWith(
        credits: creditosActualizados,
        isLoading: false,
        successMessage: 'Pago procesado exitosamente',
      );
    }

    return result;
  }

  /// Obtiene cr√©ditos de un cliente espec√≠fico
  Future<void> loadClientCredits(
    int clientId, {
    String? status,
    List<String>? frequencies,
    DateTime? startDateFrom,
    DateTime? startDateTo,
    DateTime? endDateFrom,
    DateTime? endDateTo,
    double? amountMin,
    double? amountMax,
    double? balanceMin,
    double? balanceMax,
    int page = 1,
    int perPage = 50,
  }) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos del cliente: $clientId');

      final response = await _creditApiService.getClientCredits(
        clientId,
        status: status,
        frequency: (frequencies == null || frequencies.isEmpty)
            ? null
            : frequencies.join(','),
        startDateFrom: startDateFrom?.toIso8601String().split('T')[0],
        startDateTo: startDateTo?.toIso8601String().split('T')[0],
        endDateFrom: endDateFrom?.toIso8601String().split('T')[0],
        endDateTo: endDateTo?.toIso8601String().split('T')[0],
        amountMin: amountMin,
        amountMax: amountMax,
        balanceMin: balanceMin,
        balanceMax: balanceMax,
        page: page,
        perPage: perPage,
      );

      if (response['success'] == true) {
        final data = response['data'];
        List<dynamic> creditsData;
        int currentPageVal = 1;
        int totalPagesVal = 1;
        int totalItemsVal = 0;

        if (data is Map<String, dynamic> && data['data'] is List) {
          creditsData = data['data'] as List<dynamic>;
          currentPageVal = data['current_page'] ?? 1;
          totalPagesVal = data['last_page'] ?? 1;
          totalItemsVal = data['total'] ?? (creditsData.length);
        } else if (data is List) {
          creditsData = data;
          totalItemsVal = data.length;
        } else {
          creditsData = const [];
        }

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          credits: credits,
          isLoading: false,
          currentPage: currentPageVal,
          totalPages: totalPagesVal,
          totalItems: totalItemsVal,
        );

        print('‚úÖ ${credits.length} cr√©ditos del cliente cargados exitosamente');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos del cliente',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos del cliente: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos del cliente: $e',
      );
    }
  }

  /// Obtiene cr√©ditos por cobrador (para admin/manager)
  Future<void> loadCobradorCredits(
    int cobradorId, {
    String? status,
    String? search,
    List<String>? frequencies,
    DateTime? startDateFrom,
    DateTime? startDateTo,
    DateTime? endDateFrom,
    DateTime? endDateTo,
    double? amountMin,
    double? amountMax,
    double? balanceMin,
    double? balanceMax,
    int page = 1,
    int perPage = 15,
  }) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos del cobrador: $cobradorId');

      final response = await _creditApiService.getCobradorCredits(
        cobradorId,
        status: status,
        search: search,
        frequency: (frequencies == null || frequencies.isEmpty)
            ? null
            : frequencies.join(','),
        startDateFrom: startDateFrom?.toIso8601String().split('T')[0],
        startDateTo: startDateTo?.toIso8601String().split('T')[0],
        endDateFrom: endDateFrom?.toIso8601String().split('T')[0],
        endDateTo: endDateTo?.toIso8601String().split('T')[0],
        amountMin: amountMin,
        amountMax: amountMax,
        balanceMin: balanceMin,
        balanceMax: balanceMax,
        page: page,
        perPage: perPage,
      );

      if (response['success'] == true) {
        final data = response['data'];
        final creditsData = (data is Map<String, dynamic>)
            ? (data['data'] as List? ?? [])
            : (data as List? ?? []);

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          credits: credits,
          isLoading: false,
          currentPage: (data is Map<String, dynamic>)
              ? (data['current_page'] ?? 1)
              : 1,
          totalPages: (data is Map<String, dynamic>)
              ? (data['last_page'] ?? 1)
              : 1,
          totalItems: (data is Map<String, dynamic>)
              ? (data['total'] ?? credits.length)
              : credits.length,
        );
        print('‚úÖ Cr√©ditos del cobrador cargados (${credits.length})');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos del cobrador',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos del cobrador: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos del cobrador: $e',
      );
    }
  }

  /// Carga estad√≠sticas del cobrador actual
  Future<void> loadCobradorStats() async {
    try {
      final authState = _ref.read(authProvider);
      if (authState.usuario == null) return;

      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando estad√≠sticas del cobrador...');

      final response = await _creditApiService.getCobradorStats(
        authState.usuario!.id.toInt(),
      );

      if (response['success'] == true) {
        final stats = CreditStats.fromJson(response['data']);

        state = state.copyWith(stats: stats, isLoading: false);

        print('‚úÖ Estad√≠sticas del cobrador cargadas exitosamente');
      } else {
        throw Exception(response['message'] ?? 'Error al cargar estad√≠sticas');
      }
    } catch (e) {
      print('‚ùå Error al cargar estad√≠sticas: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar estad√≠sticas: $e',
      );
    }
  }

  /// Carga cr√©ditos que requieren atenci√≥n
  Future<void> loadCreditsRequiringAttention() async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos que requieren atenci√≥n...');

      final response = await _creditApiService.getCreditsRequiringAttention();

      if (response['success'] == true) {
        final data = response['data'];
        final creditsData = data['data'] as List? ?? [];

        final attentionCredits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          attentionCredits: attentionCredits,
          isLoading: false,
        );

        print(
          '‚úÖ ${attentionCredits.length} cr√©ditos que requieren atenci√≥n cargados',
        );
      } else {
        throw Exception(
          response['message'] ??
              'Error al cargar cr√©ditos que requieren atenci√≥n',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos que requieren atenci√≥n: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos que requieren atenci√≥n: $e',
      );
    }
  }

  /// Obtiene un cr√©dito por ID desde el backend (sin alterar el estado global)
  Future<Credito?> fetchCreditById(int creditId) async {
    try {
      print('üîç [CreditNotifier] Fetching credit by ID: $creditId');

      Map<String, dynamic> response;
      try {
        response = await _creditApiService.getCreditDetails(creditId);
      } catch (_) {
        response = await _creditApiService.getCredit(creditId);
      }

      if (response['success'] == true && response['data'] != null) {
        final data = response['data'];
        Map<String, dynamic>? creditJson;

        if (data is Map<String, dynamic>) {
          if (data['credit'] is Map<String, dynamic>) {
            creditJson = Map<String, dynamic>.from(data['credit']);
          } else if (data['data'] is Map<String, dynamic>) {
            creditJson = Map<String, dynamic>.from(data['data']);
          } else {
            creditJson = Map<String, dynamic>.from(data);
          }
        }

        if (creditJson != null) {
          final credit = Credito.fromJson(creditJson);
          print('‚úÖ [CreditNotifier] Cr√©dito obtenido: ${credit.id}');
          return credit;
        }
      }

      print(
        '‚ö†Ô∏è [CreditNotifier] No se pudo parsear el cr√©dito con ID $creditId',
      );
      return null;
    } catch (e) {
      print('‚ùå [CreditNotifier] Error al obtener cr√©dito $creditId: $e');
      return null;
    }
  }

  /// Obtiene el cronograma de pagos de un cr√©dito
  Future<List<PaymentSchedule>?> getPaymentSchedule(int creditId) async {
    try {
      print(
        'üîÑ Obteniendo cronograma de pagos desde backend para cr√©dito: $creditId',
      );
      final response = await _creditApiService.getCreditPaymentSchedule(
        creditId,
      );
      if (response['success'] == true) {
        final data = response['data'];
        List<dynamic> scheduleData = [];

        if (data is List) {
          scheduleData = data;
        } else if (data is Map<String, dynamic>) {
          final inner = data['schedule'];
          if (inner is List) {
            scheduleData = inner;
          } else if (inner is Map<String, dynamic>) {
            final nested = inner['data'];
            if (nested is List) scheduleData = nested;
          }
        }

        final schedule = scheduleData
            .whereType<Map<String, dynamic>>()
            .map((item) => PaymentSchedule.fromJson(item))
            .toList();
        print('‚úÖ Cronograma de ${schedule.length} cuotas obtenido del backend');
        return schedule;
      }
    } catch (apiError) {
      print('‚ö†Ô∏è No se pudo obtener cronograma desde backend: $apiError');
    }

    // Si backend falla, generar cronograma localmente
    try {
      print(
        'üîÅ Generando cronograma de pagos localmente para cr√©dito: $creditId',
      );
      final credit = state.credits.firstWhere(
        (c) => c.id == creditId,
        orElse: () => throw Exception('Cr√©dito no encontrado'),
      );
      final schedule = _generatePaymentSchedule(credit);
      print('‚úÖ Cronograma de ${schedule.length} cuotas generado localmente');
      return schedule;
    } catch (e) {
      print('‚ùå Error al generar cronograma local: $e');
      state = state.copyWith(errorMessage: 'Error al obtener cronograma: $e');
      return null;
    }
  }

  /// Obtiene detalles extendidos de un cr√©dito: credit + summary + schedule + history
  Future<CreditFullDetails?> getCreditFullDetails(int creditId) async {
    try {
      final response = await _creditApiService.getCreditDetails(creditId);
      if (response['success'] == true) {
        final details = CreditFullDetails.fromApi(response);
        return details;
      } else {
        throw Exception(response['message'] ?? 'Error al obtener detalles');
      }
    } catch (e) {
      print('‚ùå Error al obtener detalles del cr√©dito: $e');
      state = state.copyWith(errorMessage: 'Error al obtener detalles: $e');
      return null;
    }
  }

  // ========================================
  // M√âTODOS DE LISTA DE ESPERA
  // ========================================

  /// Carga cr√©ditos pendientes de aprobaci√≥n
  Future<void> loadPendingApprovalCredits({int page = 1}) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos pendientes de aprobaci√≥n...');

      final response = await _creditApiService.getPendingApprovalCredits(
        page: page,
      );

      if (response['success'] == true) {
        final data = response['data'];
        List<dynamic> creditsData = [];

        if (data is List) {
          creditsData = data;
        } else if (data is Map<String, dynamic>) {
          creditsData = data['data'] as List? ?? [];
        }

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          pendingApprovalCredits: credits,
          isLoading: false,
        );

        print('‚úÖ ${credits.length} cr√©ditos pendientes de aprobaci√≥n cargados');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos pendientes',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos pendientes de aprobaci√≥n: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos pendientes: $e',
      );
    }
  }

  /// Carga cr√©ditos en lista de espera para entrega
  Future<void> loadWaitingDeliveryCredits({int page = 1}) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos en lista de espera...');

      final response = await _creditApiService.getWaitingDeliveryCredits(
        page: page,
      );

      if (response['success'] == true) {
        final data = response['data'];
        List<dynamic> creditsData = [];

        if (data is List) {
          creditsData = data;
        } else if (data is Map<String, dynamic>) {
          creditsData = data['data'] as List? ?? [];
        }

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          waitingDeliveryCredits: credits,
          isLoading: false,
        );

        print('‚úÖ ${credits.length} cr√©ditos en lista de espera cargados');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos en espera',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos en lista de espera: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos en lista de espera: $e',
      );
    }
  }

  /// Carga cr√©ditos listos para entrega hoy
  Future<void> loadReadyForDeliveryCredits({int page = 1}) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos listos para entrega hoy...');

      final response = await _creditApiService.getReadyForDeliveryToday(
        page: page,
      );

      if (response['success'] == true) {
        final data = response['data'];
        final creditsData = data is List ? data : (data['data'] as List? ?? []);

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          readyForDeliveryCredits: credits,
          isLoading: false,
        );

        print('‚úÖ ${credits.length} cr√©ditos listos para entrega hoy cargados');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos listos',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos listos para entrega: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos listos para entrega: $e',
      );
    }
  }

  /// Carga cr√©ditos con entrega atrasada
  Future<void> loadOverdueDeliveryCredits({int page = 1}) async {
    try {
      state = state.copyWith(isLoading: true, errorMessage: null);
      print('üîÑ Cargando cr√©ditos con entrega atrasada...');

      final response = await _creditApiService.getOverdueDeliveryCredits(
        page: page,
      );

      if (response['success'] == true) {
        final data = response['data'];
        List<dynamic> creditsData = [];

        if (data is List) {
          creditsData = data;
        } else if (data is Map<String, dynamic>) {
          creditsData = data['data'] as List? ?? [];
        }

        final credits = creditsData
            .map(
              (creditJson) =>
                  Credito.fromJson(creditJson as Map<String, dynamic>),
            )
            .toList();

        state = state.copyWith(
          overdueDeliveryCredits: credits,
          isLoading: false,
        );

        print('‚úÖ ${credits.length} cr√©ditos con entrega atrasada cargados');
      } else {
        throw Exception(
          response['message'] ?? 'Error al cargar cr√©ditos atrasados',
        );
      }
    } catch (e) {
      print('‚ùå Error al cargar cr√©ditos con entrega atrasada: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al cargar cr√©ditos con entrega atrasada: $e',
      );
    }
  }

  /// Carga resumen de lista de espera
  Future<void> loadWaitingListSummary() async {
    try {
      print('üîÑ Cargando resumen de lista de espera...');

      final response = await _creditApiService.getWaitingListSummary();

      if (response['success'] == true) {
        final summaryData = response['data'];
        final summary = WaitingListSummary.fromJson(summaryData);

        state = state.copyWith(waitingListSummary: summary);

        print('‚úÖ Resumen de lista de espera cargado');
      } else {
        throw Exception(response['message'] ?? 'Error al cargar resumen');
      }
    } catch (e) {
      print('‚ùå Error al cargar resumen de lista de espera: $e');
      state = state.copyWith(
        errorMessage: 'Error al cargar resumen de lista de espera: $e',
      );
    }
  }

  /// Aprueba un cr√©dito para entrega
  Future<bool> approveCreditForDelivery({
    required int creditId,
    required DateTime scheduledDeliveryDate,
    String? notes,
    bool immediate = false,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
        validationErrors: {},
      );
      print('‚úÖ Aprobando cr√©dito para entrega: $creditId');

      final response = await _creditApiService.approveCreditForDelivery(
        creditId: creditId.toString(),
        scheduledDeliveryDate: scheduledDeliveryDate,
        notes: notes,
      );

      if (response['success'] == true) {
        final creditoActualizado = Credito.fromJson(response['data']['credit']);

        _updateCreditInAllLists(creditoActualizado);
        _notifyCreditApproved(creditoActualizado, immediate: immediate);

        state = state.copyWith(
          isLoading: false,
          successMessage: 'Cr√©dito aprobado para entrega exitosamente',
        );

        return true;
      }

      state = state.copyWith(
        isLoading: false,
        errorMessage: 'No se pudo aprobar el cr√©dito',
      );
      return false;
    } on ApiException catch (e) {
      print('‚ùå ApiException: ${e.message}');

      Map<String, dynamic> validationErrors = {};
      if (e.hasValidationErrors) {
        validationErrors = e.validationErrors;
        print('‚ùå Errores de validaci√≥n: $validationErrors');
      }

      state = state.copyWith(
        isLoading: false,
        errorMessage: e.toString(),
        validationErrors: validationErrors,
      );
      return false;
    } catch (e) {
      print('‚ùå Error general al aprobar cr√©dito: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al aprobar cr√©dito para entrega: $e',
      );
      return false;
    }
  }

  /// Rechaza un cr√©dito
  Future<bool> rejectCredit({
    required int creditId,
    required String reason,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('‚ùå Rechazando cr√©dito: $creditId');

      final response = await _creditApiService.rejectCredit(
        creditId,
        reason: reason,
      );

      if (response['success'] == true) {
        final creditoActualizado = Credito.fromJson(response['data']['credit']);

        _updateCreditInAllLists(creditoActualizado);
        _notifyCreditRejected(creditoActualizado, reason);

        state = state.copyWith(
          isLoading: false,
          successMessage: 'Cr√©dito rechazado exitosamente',
        );

        print('‚úÖ Cr√©dito rechazado exitosamente');
        return true;
      } else {
        throw Exception(response['message'] ?? 'Error al rechazar cr√©dito');
      }
    } catch (e) {
      print('‚ùå Error al rechazar cr√©dito: $e');

      String errorMessage = 'Error al rechazar cr√©dito';
      if (e.toString().contains('403')) {
        errorMessage = 'No tienes permisos para rechazar cr√©ditos';
      } else if (e.toString().contains('404')) {
        errorMessage = 'Cr√©dito no encontrado';
      }

      state = state.copyWith(isLoading: false, errorMessage: errorMessage);
      return false;
    }
  }

  /// Reprograma la fecha de entrega de un cr√©dito
  Future<bool> rescheduleCreditDelivery({
    required int creditId,
    required DateTime newScheduledDate,
    String? reason,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('‚è∞ Reprogramando fecha de entrega del cr√©dito: $creditId');

      final response = await _creditApiService.rescheduleCreditDelivery(
        creditId,
        newScheduledDate: newScheduledDate,
        reason: reason,
      );

      // La API puede devolver en diferentes formatos; intentamos cubrir ambos
      final dynamic data = response['data'] ?? response;
      final dynamic creditJson = (data is Map<String, dynamic>)
          ? (data['credit'] ?? data)
          : null;

      if (creditJson is Map<String, dynamic>) {
        final creditoActualizado = Credito.fromJson(creditJson);
        _updateCreditInAllLists(creditoActualizado);
      }

      state = state.copyWith(
        isLoading: false,
        successMessage: 'Fecha de entrega reprogramada exitosamente',
      );
      print('‚úÖ Fecha de entrega reprogramada');
      return true;
    } catch (e) {
      print('‚ùå Error al reprogramar fecha de entrega: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'Error al reprogramar fecha de entrega: $e',
      );
      return false;
    }
  }

  /// Entrega un cr√©dito al cliente
  Future<bool> deliverCreditToClient({
    required int creditId,
    String? notes,
  }) async {
    try {
      state = state.copyWith(
        isLoading: true,
        errorMessage: null,
        successMessage: null,
      );
      print('üöö Entregando cr√©dito al cliente: $creditId');

      final response = await _creditApiService.deliverCreditToClient(
        creditId,
        notes: notes,
      );

      if (response['success'] == true) {
        final creditoActualizado = Credito.fromJson(response['data']['credit']);

        _updateCreditInAllLists(creditoActualizado);
        _notifyCreditDelivered(creditoActualizado, notes: notes);

        state = state.copyWith(
          isLoading: false,
          successMessage: 'Cr√©dito entregado al cliente exitosamente',
        );

        print('‚úÖ Cr√©dito entregado al cliente exitosamente');
        return true;
      } else {
        throw Exception(response['message'] ?? 'Error al entregar cr√©dito');
      }
    } catch (e) {
      print('‚ùå Error al entregar cr√©dito: $e');

      String errorMessage = 'Error al entregar cr√©dito';
      if (e.toString().contains('403')) {
        errorMessage = 'No tienes permisos para entregar este cr√©dito';
      } else if (e.toString().contains('404')) {
        errorMessage = 'Cr√©dito no encontrado';
      }

      state = state.copyWith(isLoading: false, errorMessage: errorMessage);
      return false;
    }
  }

  // ========================================
  // M√âTODOS DE UTILIDAD
  // ========================================

  /// Limpia mensajes de error y √©xito
  void clearMessages() {
    print('üßπ Limpiando mensajes de error y √©xito...');
    state = state.copyWith(errorMessage: null, successMessage: null);
  }

  /// Limpia solo el mensaje de error
  void clearError() {
    print('üßπ Limpiando error...');
    state = state.copyWith(errorMessage: null);
  }

  /// Limpia solo el mensaje de √©xito
  void clearSuccess() {
    print('üßπ Limpiando √©xito...');
    state = state.copyWith(successMessage: null);
  }

  // ========================================
  // M√âTODOS PRIVADOS
  // ========================================

  /// Intenta inferir el n√∫mero de cuotas a partir de totalAmount e installmentAmount
  int? _inferInstallmentsFromAmounts(
    double? totalAmount,
    double? installmentAmount,
  ) {
    if (totalAmount == null ||
        installmentAmount == null ||
        installmentAmount <= 0)
      return null;
    final est = (totalAmount / installmentAmount).round();
    if (est <= 0) return null;
    return est;
  }

  /// Genera un cronograma de pagos local basado en los datos del cr√©dito
  List<PaymentSchedule> _generatePaymentSchedule(Credito credit) {
    final schedule = <PaymentSchedule>[];

    // Calcular informaci√≥n base
    final totalDays = credit.endDate.difference(credit.startDate).inDays;
    final interestRate = credit.interestRate ?? 20.0;

    int installments;
    int daysBetweenPayments;

    // Determinar n√∫mero de cuotas y frecuencia basado en el tipo
    switch (credit.frequency) {
      case 'daily':
        final inferred = _inferInstallmentsFromAmounts(
          credit.totalAmount,
          credit.installmentAmount,
        );
        installments = inferred ?? 24;
        daysBetweenPayments = 1;
        break;
      case 'weekly':
        installments = (totalDays / 7).ceil();
        daysBetweenPayments = 7;
        break;
      case 'biweekly':
        installments = (totalDays / 14).ceil();
        daysBetweenPayments = 14;
        break;
      case 'monthly':
        installments = (totalDays / 30).ceil();
        daysBetweenPayments = 30;
        break;
      default:
        installments = 24;
        daysBetweenPayments = (totalDays / installments).round();
    }

    // Usar installmentAmount si est√° disponible, o calcular
    final installmentAmount =
        credit.installmentAmount ??
        (credit.amount * (1 + interestRate / 100)) / installments;

    // Generar cronograma
    DateTime currentDue = credit.startDate;
    int created = 0;
    while (created < installments) {
      currentDue = currentDue.add(Duration(days: daysBetweenPayments));
      if (credit.frequency == 'daily' &&
          currentDue.weekday == DateTime.sunday) {
        continue; // Saltar domingos
      }
      final dueDate = currentDue;
      created++;

      // Verificar si ya fue pagado comparando con pagos existentes
      final existingPayment =
          credit.payments?.where((p) {
            final paymentDate = p.paymentDate;
            final daysDiff = (paymentDate.difference(dueDate).inDays).abs();
            return daysDiff <= (daysBetweenPayments ~/ 2);
          }).isNotEmpty ??
          false;

      // Determinar estado
      String status;
      if (existingPayment) {
        status = 'paid';
      } else if (dueDate.isBefore(DateTime.now())) {
        status = 'overdue';
      } else {
        status = 'pending';
      }

      schedule.add(
        PaymentSchedule(
          installmentNumber: created,
          dueDate: dueDate,
          amount: installmentAmount,
          status: status,
        ),
      );
    }

    return schedule;
  }

  /// Actualiza un cr√©dito en todas las listas donde pueda estar presente
  void _updateCreditInAllLists(Credito creditoActualizado) {
    final creditosActualizados = state.credits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    final attentionUpdated = state.attentionCredits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    final pendingUpdated = state.pendingApprovalCredits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    final waitingUpdated = state.waitingDeliveryCredits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    final readyUpdated = state.readyForDeliveryCredits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    final overdueUpdated = state.overdueDeliveryCredits.map((credito) {
      return credito.id == creditoActualizado.id ? creditoActualizado : credito;
    }).toList();

    state = state.copyWith(
      credits: creditosActualizados,
      attentionCredits: attentionUpdated,
      pendingApprovalCredits: pendingUpdated,
      waitingDeliveryCredits: waitingUpdated,
      readyForDeliveryCredits: readyUpdated,
      overdueDeliveryCredits: overdueUpdated,
    );
  }

  /// Notifica la creaci√≥n de un cr√©dito v√≠a WebSocket
  void _notifyCreditCreated(Credito credito) {
    try {
      final authState = _ref.read(authProvider);
      final wsNotifier = _ref.read(webSocketProvider.notifier);

      if (authState.usuario != null) {
        // Notificar al manager (targetUserId) que el cobrador solicit√≥ cr√©dito
        final managerId = authState.usuario!.assignedManagerId?.toString();
        wsNotifier.notifyCreditLifecycle(
          action: 'created',
          creditId: credito.id!,
          targetUserId: managerId,
          credit: {
            'id': credito.id,
            'client_id': credito.clientId,
            'client_name': credito.client?.nombre,
            'amount': credito.amount,
          },
          userType: 'cobrador',
          message: 'Nuevo cr√©dito solicitado',
        );
        print('üîî WS: evento credit_lifecycle(created) emitido');
      }
    } catch (e) {
      print('‚ö†Ô∏è Error enviando notificaci√≥n WebSocket: $e');
    }
  }

  /// Notifica la aprobaci√≥n de un cr√©dito v√≠a WebSocket
  void _notifyCreditApproved(Credito credito, {bool immediate = false}) {
    try {
      final authState = _ref.read(authProvider);
      final wsNotifier = _ref.read(webSocketProvider.notifier);

      if (authState.usuario != null) {
        // Notificar al creador del cr√©dito (puede ser manager o cobrador), sin importar su rol
        final String? creatorIdStr = (() {
          final int? creatorId =
              credito.createdBy ??
              (credito.creator?.id is int ? credito.creator?.id as int? : null);
          return creatorId != null ? creatorId.toString() : null;
        })();

        wsNotifier.notifyCreditLifecycle(
          action: 'approved',
          creditId: credito.id!,
          targetUserId: creatorIdStr,
          credit: {
            'id': credito.id,
            'client_id': credito.clientId,
            'client_name': credito.client?.nombre,
            'amount': credito.amount,
            'entrega_inmediata': immediate,
          },
          userType: 'manager',
          message: 'Cr√©dito aprobado',
        );
        print('üîî WS: evento credit_lifecycle(approved) emitido');
      }
    } catch (e) {
      print('‚ö†Ô∏è Error enviando notificaci√≥n WebSocket: $e');
    }
  }

  /// Notifica el rechazo de un cr√©dito v√≠a WebSocket
  void _notifyCreditRejected(Credito credito, String reason) {
    try {
      final authState = _ref.read(authProvider);
      final wsNotifier = _ref.read(webSocketProvider.notifier);

      if (authState.usuario != null) {
        // Notificar al cobrador que el manager rechaz√≥ el cr√©dito
        wsNotifier.notifyCreditLifecycle(
          action: 'rejected',
          creditId: credito.id!,
          targetUserId: credito.cobrador?.id.toString(),
          credit: {
            'id': credito.id,
            'client_id': credito.clientId,
            'client_name': credito.client?.nombre,
            'amount': credito.amount,
            'reason': reason,
          },
          userType: 'manager',
          message: 'Cr√©dito rechazado: $reason',
        );
        print('üîî WS: evento credit_lifecycle(rejected) emitido');
      }
    } catch (e) {
      print('‚ö†Ô∏è Error enviando notificaci√≥n WebSocket: $e');
    }
  }

  /// Orquesta aprobaci√≥n y entrega inmediata del cr√©dito
  Future<bool> approveAndDeliverCredit({
    required int creditId,
    required DateTime scheduledDeliveryDate,
    String? approvalNotes,
    String? deliveryNotes,
  }) async {
    // Primero aprobar para entrega
    final approved = await approveCreditForDelivery(
      creditId: creditId,
      scheduledDeliveryDate: scheduledDeliveryDate,
      notes: approvalNotes,
      immediate: true,
    );
    if (!approved) return false;

    // Luego entregar al cliente
    final delivered = await deliverCreditToClient(
      creditId: creditId,
      notes: deliveryNotes,
    );
    return delivered;
  }

  /// Notifica la entrega de un cr√©dito v√≠a WebSocket
  void _notifyCreditDelivered(Credito credito, {String? notes}) {
    try {
      final authState = _ref.read(authProvider);
      final wsNotifier = _ref.read(webSocketProvider.notifier);

      if (authState.usuario != null) {
        // Notificar al manager que se realiz√≥ la entrega del cr√©dito
        final authUser = authState.usuario!;
        final managerId = authUser.assignedManagerId?.toString();
        wsNotifier.notifyCreditLifecycle(
          action: 'delivered',
          creditId: credito.id!,
          targetUserId: managerId,
          credit: {
            'id': credito.id,
            'client_id': credito.clientId,
            'client_name': credito.client?.nombre,
            'amount': credito.amount,
            if (notes != null) 'notes': notes,
          },
          userType: 'cobrador',
          message: 'Cr√©dito entregado',
        );
        print('üîî WS: evento credit_lifecycle(delivered) emitido');
      }
    } catch (e) {
      print('‚ö†Ô∏è Error enviando notificaci√≥n WebSocket: $e');
    }
  }
}

// Provider para gestionar cr√©ditos
final creditProvider = StateNotifierProvider<CreditNotifier, CreditState>((
  ref,
) {
  final creditApiService = CreditApiService();
  return CreditNotifier(creditApiService, ref);
});
